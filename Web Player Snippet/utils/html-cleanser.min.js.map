{"version":3,"file":"html-cleanser","names":["disallowedTags","datasrcAttribute","useAttribute","srcAttribute","tags","removeRules","RegExp","map","source","join","cleanHTML","input","allowed","some","tag","includes","Error","toLowerCase","match","output","replace","current","$0","$1","fullTag","tagName"],"sources":["const disallowedTags = [\n  \"script\",\n  \"img\",\n  \"a\",\n  \"object\",\n  \"iframe\",\n  \"embed\",\n  \"input\",\n  \"textarea\",\n  \"button\",\n  \"link\",\n  \"style\",\n  \"base\",\n]\nconst comments = /<!--[\\s\\S]*?-->/gi\nconst xssLocator = /javascript:\\/\\*-->/gi\nconst ecmaSet = /Set\\.constructor`/gi\nconst xml = /<\\?xml/gi\nconst cssUrlProperty = /url\\s?\\(.*?\\)/gi\nconst documentWrite = /document\\.write/gi\n\nconst datasrcAttribute = /(datasrc=\"?(.*?)\"?)>/gi\nconst useAttribute = /(use=\"?(.*?)\"?)>/gi\nconst srcAttribute = /(src=\"?(.*?)\"?)>/gi\n\nconst tags = /<\\s?\\/?\\s?([a-z0-9]*)\\b[^>]*\\s?>?/gi\n\nconst removeRules = new RegExp(\n  `(${[comments, xssLocator, ecmaSet, xml, cssUrlProperty, documentWrite]\n    .map(({ source }) => source)\n    .join(\"|\")})`,\n  \"gi\"\n)\n\n// Edited from https://github.com/MyBibHQ/mybib-ui/blob/0d11a5af7f620fc3a663a79b4b57f9c59c6157e3/src/components/RichTextarea.vue#L32-L55\n\n/**\n * @param {string} input - text to sanitize\n * @param {string} [allowed] - tags to allow\n */\nexport const cleanHTML = (input, allowed = \"<i><em><span><p>\") => {\n  if (!input) return \"\"\n  const hasUnsafeTag = disallowedTags.some((tag) =>\n    allowed.includes(`<${tag}>`)\n  )\n  if (hasUnsafeTag) throw new Error(\"Disallowed tags: \" + allowed)\n  // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)\n  allowed = ((allowed + \"\").toLowerCase().match(/<[a-z0-9]+>/g) || []).join(\"\")\n\n  let output = input\n  // removes the \"<\" char at the end of the string to replicate PHP\"s behaviour\n  output = output.replace(/<$/, \"\")\n  // recursively remove tags to ensure that the returned string\n  // doesn\"t contain forbidden tags after previous passes (e.g. \"<<bait/>switch/>\")\n  while (true) {\n    const current = output\n    output = current\n      .replace(removeRules, \"\")\n      .replace(datasrcAttribute, ($0, $1) => {\n        return $0.replace($1, \"\") // return match keeping the \">\" delimiter\n      })\n      .replace(srcAttribute, ($0, $1) => {\n        return $0.replace($1, \"\") // return match keeping the \">\" delimiter\n      })\n      .replace(useAttribute, ($0, $1) => {\n        return $0.replace($1, \"\") // return match keeping the \">\" delimiter\n      })\n      .replace(tags, (fullTag, tagName) => {\n        return allowed.includes(`<${tagName.toLowerCase()}>`) ? fullTag : \"\"\n      })\n    // return once no more tags are removed\n    if (current === output) {\n      return output\n    }\n  }\n}"],"mappings":";AACA,MAAMA,EAAiB,CACnB,SACA,MACA,IACA,SACA,SACA,QACA,QACA,WACA,SACA,OACA,QACA,QASIC,EAAmB,yBACnBC,EAAe,qBACfC,EAAe,qBAEfC,EAAO,sCAEPC,EAAc,IAAIC,OACtB,IAAI,CAdW,oBACE,uBACH,sBACJ,WACW,kBACD,qBAUjBC,KAAI,EAAGC,YAAaA,IACpBC,KAAK,QACR;;;;;;OASK,MAAMC,UAAY,CAACC,EAAOC,EAAU,sBACzC,IAAKD,EAAO,MAAO,GAInB,GAHqBX,EAAea,MAAMC,GACxCF,EAAQG,SAAS,IAAID,QAEL,MAAM,IAAIE,MAAM,oBAAsBJ;wFAExDA;IAAYA,EAAU,IAAIK,cAAcC,MAAM,iBAAmB,IAAIT,KAAK,IAE1E,IAAIU,EAASR;;;;AAKb,IAHAQ,EAASA,EAAOC,QAAQ,KAAM,MAGjB,CACX,MAAMC,EAAUF;;AAgBhB,GAfAA,EAASE,EACND,QAAQf,EAAa,IACrBe,QAAQnB,GAAkB,CAACqB,EAAIC,IACvBD,EAAGF,QAAQG,EAAI;GAEvBH,QAAQjB,GAAc,CAACmB,EAAIC,IACnBD,EAAGF,QAAQG,EAAI;GAEvBH,QAAQlB,GAAc,CAACoB,EAAIC,IACnBD,EAAGF,QAAQG,EAAI;GAEvBH,QAAQhB,GAAM,CAACoB,EAASC,IAChBb,EAAQG,SAAS,IAAIU,EAAQR,kBAAoBO,EAAU,KAGlEH,IAAYF,EACd,OAAOA,CAEX"}